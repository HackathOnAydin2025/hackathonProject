package com.example.hackathon // Kendi paket yapÄ±nÄ±za gÃ¶re gÃ¼ncelleyin

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import com.example.hackathon.data.DailyTaskSummary
import com.example.hackathon.databinding.FragmentProgressBinding
import com.example.hackathon.progress.viewmodel.GardenViewModel
import com.example.hackathon.tasks.TaskViewModel
import com.github.mikephil.charting.charts.PieChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.PieData
import com.github.mikephil.charting.data.PieDataSet
import com.github.mikephil.charting.data.PieEntry
import com.github.mikephil.charting.formatter.DefaultValueFormatter
import com.github.mikephil.charting.highlight.Highlight
import com.github.mikephil.charting.listener.OnChartValueSelectedListener
import com.github.mikephil.charting.utils.ColorTemplate
import java.text.SimpleDateFormat
import java.util.*
import com.github.mikephil.charting.components.Legend // Legend importu

class ProgressFragment : Fragment() {

    private var _binding: FragmentProgressBinding? = null
    private val binding get() = _binding!!

    private val gardenViewModel: GardenViewModel by activityViewModels()
    private val taskViewModel: TaskViewModel by activityViewModels()

    private lateinit var pieChart: PieChart
    private val pieChartSliceDateMap = mutableMapOf<Int, Date>() // PieChart dilim indeksi ile tarihi eÅŸleÅŸtirmek iÃ§in
    private val TAG_PROGRESS = "ProgressFragment"

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentProgressBinding.inflate(inflater, container, false)
        Log.d(TAG_PROGRESS, "onCreateView Ã§aÄŸrÄ±ldÄ±.")
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d(TAG_PROGRESS, "onViewCreated BAÅžLADI.")
        pieChart = binding.pieChartTasks
        binding.textDate.text = getWeekDateRange() // HaftalÄ±k tarih aralÄ±ÄŸÄ±nÄ± ayarla

        setupBasePieChartAppearance()    // PieChart'Ä±n temel gÃ¶rÃ¼nÃ¼m ayarlarÄ±
        loadAndObserveWeeklyTaskSummary() // ViewModel'den haftalÄ±k gÃ¶rev Ã¶zetini yÃ¼kle ve gÃ¶zlemle

        // BahÃ§edeki aÄŸaÃ§ bilgisini gÃ¶zlemle
        gardenViewModel.gardenTreeInfo.observe(viewLifecycleOwner) { treeInfoList ->
            val treeSummary = if (treeInfoList.isNullOrEmpty()) {
                "BahÃ§ede aÄŸaÃ§ yok"
            } else {
                treeInfoList.joinToString(", ") { "${it.count} ${it.name}" }.ifEmpty { "BahÃ§ede aÄŸaÃ§ yok" }
            }
            binding.treeText.text = treeSummary
        }

        // Su damlasÄ± sayÄ±sÄ±nÄ± gÃ¶zlemle
        gardenViewModel.waterDroplets.observe(viewLifecycleOwner) { waterCount ->
            Log.d(TAG_PROGRESS, "ProgressFragment: GÃ¶zlemlenen su damlasÄ± sayÄ±sÄ±: $waterCount")
            binding.dropText.text = "$waterCount Damla"
        }

        // BugÃ¼n iÃ§in planlanan toplam odak sÃ¼resini gÃ¶zlemle
        taskViewModel.totalPlannedFocusTimeToday.observe(viewLifecycleOwner, Observer { totalPlannedMinutes ->
            binding.progressBarFocus.max = (totalPlannedMinutes ?: 0).coerceAtLeast(1) // Max 0 olmamalÄ±
            updateFocusStatsText()
        })

        // BugÃ¼n harcanan gerÃ§ek odak sÃ¼resini gÃ¶zlemle
        taskViewModel.actualFocusTimeSpentToday.observe(viewLifecycleOwner, Observer { totalActualMinutes ->
            binding.progressBarFocus.progress = totalActualMinutes ?: 0
            updateFocusStatsText()
        })

        // BahÃ§eye geri dÃ¶n butonu
        binding.buttonBackToGarden.setOnClickListener {
            try {
                // NavGraph'Ä±nÄ±zda GardenFragment'a bir action tanÄ±mlÄ±ysa onu kullanÄ±n.
                // findNavController().navigate(R.id.action_progressFragment_to_gardenFragment)
                // EÄŸer sadece bir Ã¶nceki ekrana dÃ¶nmek yeterliyse popBackStack() kullanÄ±labilir.
                if (!findNavController().popBackStack()) {
                    // EÄŸer popBackStack false dÃ¶nerse (yÄ±ÄŸÄ±nda baÅŸka fragment yoksa),
                    // ana ekrana (muhtemelen TaskListFragment) gitmeyi deneyebiliriz.
                    // Bu kÄ±sÄ±m uygulamanÄ±zÄ±n navigasyon akÄ±ÅŸÄ±na gÃ¶re dÃ¼zenlenmeli.
                    // findNavController().navigate(R.id.action_global_taskListFragment) // Ã–rnek
                }
            } catch (e: IllegalStateException) {
                Log.e(TAG_PROGRESS, "popBackStack yapÄ±lamadÄ±: ${e.message}")
                Toast.makeText(context, "Ã–nceki ekrana dÃ¶nÃ¼lemedi.", Toast.LENGTH_SHORT).show()
            }
        }
        Log.d(TAG_PROGRESS, "onViewCreated TAMAMLANDI.")
    }

    private fun updateFocusStatsText() {
        val actualMinutes = taskViewModel.actualFocusTimeSpentToday.value ?: 0
        val plannedMinutes = taskViewModel.totalPlannedFocusTimeToday.value ?: 0
        binding.textViewFocusStats.text = if (plannedMinutes > 0) {
            "BugÃ¼n: $actualMinutes dk / $plannedMinutes dk odaklanÄ±ldÄ±"
        } else {
            if (actualMinutes > 0) "BugÃ¼n: $actualMinutes dk odaklanÄ±ldÄ± (PlansÄ±z)"
            else "BugÃ¼n odaklanma kaydÄ± yok"
        }
        updateMotivationText(actualMinutes, plannedMinutes)
    }

    private fun updateMotivationText(actualMinutes: Int, plannedMinutes: Int) {
        binding.textViewMotivation.text = when {
            plannedMinutes == 0 && actualMinutes == 0 -> "BugÃ¼n iÃ§in bir odak planÄ± yapmaya ne dersin? ðŸŒ±"
            actualMinutes == 0 && plannedMinutes > 0 -> "Ä°lk adÄ±mÄ±nÄ± at, harika ÅŸeyler baÅŸarabilirsin! âœ¨"
            actualMinutes > 0 && actualMinutes < plannedMinutes -> "Harika gidiyorsun, devam et! ðŸš€"
            actualMinutes > 0 && actualMinutes >= plannedMinutes && plannedMinutes > 0 -> "Tebrikler! BugÃ¼nkÃ¼ hedefine ulaÅŸtÄ±n! ðŸŽ‰"
            actualMinutes > 0 && plannedMinutes == 0 -> "PlansÄ±z da olsa odaklanmak harika! ðŸ’ª"
            else -> "Odaklanmaya devam et, potansiyelin sÄ±nÄ±rsÄ±z! ðŸ’ª"
        }
    }

    private fun loadAndObserveWeeklyTaskSummary() {
        val calendar = Calendar.getInstance()
        // HaftanÄ±n Pazartesi gÃ¼nÃ¼ ile baÅŸlamasÄ±nÄ± saÄŸla
        calendar.firstDayOfWeek = Calendar.MONDAY
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
        // Saat, dakika, saniye ve milisaniyeyi sÄ±fÄ±rla (sadece tarih karÅŸÄ±laÅŸtÄ±rmasÄ± iÃ§in)
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        calendar.set(Calendar.MILLISECOND, 0)

        val sdfLog = SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z", Locale.getDefault())
        Log.d(TAG_PROGRESS, "HaftalÄ±k Ã¶zet iÃ§in ViewModel'e gÃ¶nderilen baÅŸlangÄ±Ã§ tarihi: ${sdfLog.format(calendar.time)}")

        taskViewModel.loadWeeklyTaskSummary(calendar.time) // ViewModel'deki fonksiyonu Ã§aÄŸÄ±r

        taskViewModel.weeklyTaskSummary.observe(viewLifecycleOwner) { summaryList ->
            Log.d(TAG_PROGRESS, "weeklyTaskSummary observer tetiklendi. Liste boyutu: ${summaryList?.size ?: "null"}")
            if (summaryList.isNullOrEmpty()) {
                pieChart.data = null // Veri yoksa grafiÄŸi temizle
                pieChart.setNoDataText("Bu hafta iÃ§in gÃ¶rev verisi bulunmamaktadÄ±r.")
                Log.d(TAG_PROGRESS, "PieChart iÃ§in veri yok veya boÅŸ, 'veri yok' metni ayarlandÄ±.")
            } else {
                Log.d(TAG_PROGRESS, "PieChart iÃ§in veri geldi, grafik gÃ¼ncelleniyor.")
                updatePieChartWithTaskData(summaryList)
            }
            pieChart.invalidate() // GrafiÄŸi her durumda yenile (veri olsun veya olmasÄ±n)
        }
    }

    private fun setupBasePieChartAppearance() {
        pieChart.description.isEnabled = false
        pieChart.isRotationEnabled = true
        pieChart.holeRadius = 45f
        pieChart.transparentCircleRadius = 50f
        pieChart.setEntryLabelColor(android.graphics.Color.DKGRAY)
        pieChart.setEntryLabelTextSize(10f)
        pieChart.setUsePercentValues(false) // GerÃ§ek deÄŸerleri gÃ¶ster
        pieChart.setDrawEntryLabels(true) // Dilim etiketlerini gÃ¶ster (Ã¶rn: "12 Pzt")

        // Legend (AÃ§Ä±klama) ayarlarÄ±
        val legend = pieChart.legend
        legend.isEnabled = true
        legend.textSize = 11f
        legend.isWordWrapEnabled = true
        legend.verticalAlignment = Legend.LegendVerticalAlignment.BOTTOM
        legend.horizontalAlignment = Legend.LegendHorizontalAlignment.CENTER
        legend.orientation = Legend.LegendOrientation.HORIZONTAL
        legend.setDrawInside(false) // GrafiÄŸin iÃ§ine Ã§izme

        // TÄ±klama dinleyicisi
        pieChart.setOnChartValueSelectedListener(object : OnChartValueSelectedListener {
            override fun onValueSelected(e: Entry?, h: Highlight?) {
                if (e == null || h == null) return
                val pieEntry = e as? PieEntry
                val sliceIndex = h.x.toInt() // Bu, PieDataSet'teki entries listesinin indeksidir
                Log.d(TAG_PROGRESS, "PieChart dilimi seÃ§ildi: Etiket='${pieEntry?.label}', DeÄŸer='${e.y}', Verilen Ä°ndeks=${sliceIndex}")

                pieChartSliceDateMap[sliceIndex]?.let { selectedDate ->
                    navigateToTaskListWithDate(selectedDate)
                } ?: run {
                    Log.w(TAG_PROGRESS, "SeÃ§ilen dilim iÃ§in tarih bulunamadÄ±. Ä°ndeks: $sliceIndex, Map: $pieChartSliceDateMap")
                }
            }
            override fun onNothingSelected() {}
        })
        Log.d(TAG_PROGRESS, "PieChart temel gÃ¶rÃ¼nÃ¼m ayarlarÄ± yapÄ±ldÄ±.")
    }

    private fun updatePieChartWithTaskData(summaryList: List<DailyTaskSummary>) {
        pieChartSliceDateMap.clear() // Ã–nceki eÅŸleÅŸmeleri temizle
        val entries = ArrayList<PieEntry>()

        // Sadece gÃ¶revi olan gÃ¼nler iÃ§in dilim ekle
        val summariesWithTasks = summaryList.filter { it.taskCount > 0 }

        if (summariesWithTasks.isEmpty()) {
            pieChart.data = null
            pieChart.setNoDataText("Bu hafta gÃ¶sterilecek gÃ¶rev verisi yok.")
            Log.d(TAG_PROGRESS, "PieChart iÃ§in hiÃ§ giriÅŸ oluÅŸturulamadÄ± (tÃ¼m gÃ¼nlerde gÃ¶rev sayÄ±sÄ± 0).")
            // pieChart.invalidate() zaten observer'da Ã§aÄŸrÄ±lÄ±yor.
            return
        }

        summariesWithTasks.forEachIndexed { index, summary ->
            // PieEntry(deÄŸer, etiket)
            entries.add(PieEntry(summary.taskCount.toFloat(), summary.label))
            // Harita iÃ§in, entries listesine eklenme sÄ±rasÄ±na gÃ¶re indeksi kullan
            pieChartSliceDateMap[index] = summary.date
            Log.d(TAG_PROGRESS, "PieChart'a eklendi: DeÄŸer=${summary.taskCount}, Etiket='${summary.label}', Ä°ndeks=$index, Tarih=${summary.date}")
        }

        val dataSet = PieDataSet(entries, "") // BaÅŸlÄ±k boÅŸ bÄ±rakÄ±labilir, legend zaten etiketleri gÃ¶sterir
        dataSet.setColors(*ColorTemplate.MATERIAL_COLORS) // Renk ÅŸablonu
        dataSet.valueTextSize = 12f
        dataSet.valueTextColor = android.graphics.Color.BLACK
        dataSet.sliceSpace = 3f // Dilimler arasÄ± boÅŸluk
        dataSet.valueFormatter = DefaultValueFormatter(0) // DeÄŸerleri tam sayÄ± olarak gÃ¶ster (Ã¶rn: 3, 5)

        val pieData = PieData(dataSet)
        pieChart.data = pieData
        pieChart.centerText = "HaftalÄ±k DaÄŸÄ±lÄ±m" // Ortadaki metin
        pieChart.setCenterTextSize(16f)

        pieChart.animateY(1200, com.github.mikephil.charting.animation.Easing.EaseInOutQuad)
        Log.d(TAG_PROGRESS, "PieChart verisi ayarlandÄ± ve animasyon baÅŸlatÄ±ldÄ±. GiriÅŸ sayÄ±sÄ±: ${entries.size}")
        // pieChart.invalidate() zaten observer'da Ã§aÄŸrÄ±lÄ±yor.
    }

    private fun navigateToTaskListWithDate(date: Date) {
        val queryDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        val dateStringForNavigation = queryDateFormat.format(date)
        Log.d(TAG_PROGRESS, "TaskListFragment'a ÅŸu tarihle gidiliyor: $dateStringForNavigation")
        try {
            val action = ProgressFragmentDirections.actionProgressFragmentToTaskListFragment(dateStringForNavigation)
            findNavController().navigate(action)
        } catch (e: Exception) {
            Log.e(TAG_PROGRESS, "Navigasyon hatasÄ± (navigateToTaskListWithDate): ${e.message}")
            Toast.makeText(context, "GÃ¶rev listesi sayfasÄ±na gidilemedi.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun getWeekDateRange(): String {
        val calendar = Calendar.getInstance()
        calendar.firstDayOfWeek = Calendar.MONDAY
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
        val startOfWeek = calendar.time
        calendar.add(Calendar.DATE, 6)
        val endOfWeek = calendar.time

        val dayFormat = SimpleDateFormat("d", Locale("tr")) // GÃ¼n (sadece sayÄ±)
        val monthYearFormat = SimpleDateFormat("MMMM yyyy", Locale("tr")) // Ay AdÄ± YÄ±l (Ã¶rn: MayÄ±s 2024)

        val startDay = dayFormat.format(startOfWeek)
        val endDay = dayFormat.format(endOfWeek)
        val monthYearString = monthYearFormat.format(startOfWeek) // BaÅŸlangÄ±Ã§ ayÄ±nÄ± kullan

        return "$startDay - $endDay $monthYearString"
    }

    override fun onDestroyView() {
        super.onDestroyView()
        pieChart.setOnChartValueSelectedListener(null) // Listener'Ä± temizle
        _binding = null // Bellek sÄ±zÄ±ntÄ±larÄ±nÄ± Ã¶nlemek iÃ§in
        Log.d(TAG_PROGRESS, "onDestroyView Ã§aÄŸrÄ±ldÄ±.")
    }
}
